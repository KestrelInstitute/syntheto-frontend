/*
 * generated by Xtext 2.23.0
 */
package edu.vanderbilt.isis.midas.generator

import com.google.inject.Inject
import com.google.inject.Provider
import edu.vanderbilt.isis.midas.SynthetoStandaloneSetup
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.generator.GeneratorContext
import org.eclipse.xtext.generator.GeneratorDelegate
import org.eclipse.xtext.generator.JavaIoFileSystemAccess
import org.eclipse.xtext.util.CancelIndicator
import org.eclipse.xtext.validation.CheckMode
import org.eclipse.xtext.validation.IResourceValidator
import java.util.ArrayList
import org.eclipse.emf.ecore.resource.Resource
import java.util.Arrays

class Main {

	def static main(String[] args) {
		if (args.empty) {
			System::err.println('Aborting: no path to EMF resource provided!')
			return
		}
		val injector = new SynthetoStandaloneSetup().createInjectorAndDoEMFRegistration
		val main = injector.getInstance(Main)
		val firstfile = args.get(0)
		if (args.length == 1) {
			main.runGenerator(firstfile)
		} else {
			val otherfiles = Arrays.copyOfRange(args, 1, args.length);
			main.runGenerator(firstfile, otherfiles)

		}

	}

	@Inject Provider<ResourceSet> resourceSetProvider

	@Inject IResourceValidator validator

	@Inject GeneratorDelegate generator

	@Inject JavaIoFileSystemAccess fileAccess

	def protected runGenerator(String string) {
		// Load the resource
		val set = resourceSetProvider.get
		val resource = set.getResource(URI.createFileURI(string), true)

		// Validate the resource
		val issues = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl)
		if (!issues.empty) {
			issues.forEach[System.err.println(it)]
			return
		}

		// Configure and start the generator
		fileAccess.outputPath = 'src-gen/'
		val context = new GeneratorContext => [
			cancelIndicator = CancelIndicator.NullImpl
		]
		generator.generate(resource, fileAccess, context)
		System.out.println('Code generation finished.')
	}

	def runGenerator(String main_model_filename, String[] all_other_filenames) {
		// Load the resource
		val set = resourceSetProvider.get();
		val resource = set.getResource(URI.createFileURI(main_model_filename), true);
		val all_resources = new ArrayList<Resource>();
		all_resources.add(resource);
		System.out.println('read file '+main_model_filename)

		// Load all other required resources
		for (String m : all_other_filenames) {
			if (!m.equals(main_model_filename)) {
				var other = set.getResource(URI.createFileURI(m), true);
				
				all_resources.add(other);
				System.out.println('reading other file: '+m)
			}
		}

		// Validate all resources
		for (Resource r : all_resources) {
			var list = validator.validate(r, CheckMode.ALL, CancelIndicator.NullImpl);
			if (!list.isEmpty()) {
				for (issue : list) {
					System.err.println(issue);
				}
				return;
			}
		}

		// Configure and start the generator
		fileAccess.setOutputPath("src-gen/");
		var context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);
		generator.generate(resource, fileAccess, context);

		System.out.println("Code generation finished.");
	}
}
