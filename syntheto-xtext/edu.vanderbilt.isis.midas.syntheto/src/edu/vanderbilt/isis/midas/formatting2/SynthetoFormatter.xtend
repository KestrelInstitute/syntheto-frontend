/*
 * generated by Xtext 2.23.0
 */
package edu.vanderbilt.isis.midas.formatting2

import com.google.common.collect.Maps
import edu.vanderbilt.isis.midas.syntheto.Alternative
import edu.vanderbilt.isis.midas.syntheto.BlockExpression
import edu.vanderbilt.isis.midas.syntheto.CondBranches
import edu.vanderbilt.isis.midas.syntheto.CondExpression
import edu.vanderbilt.isis.midas.syntheto.Elseexpr
import edu.vanderbilt.isis.midas.syntheto.Expression
import edu.vanderbilt.isis.midas.syntheto.FunctionDefinition
import edu.vanderbilt.isis.midas.syntheto.FunctionSpecfication
import edu.vanderbilt.isis.midas.syntheto.IfExpression
import edu.vanderbilt.isis.midas.syntheto.LetExpression
import edu.vanderbilt.isis.midas.syntheto.Map
import edu.vanderbilt.isis.midas.syntheto.Pragmadirectives
import edu.vanderbilt.isis.midas.syntheto.ProductTypeDefinition
import edu.vanderbilt.isis.midas.syntheto.Program
import edu.vanderbilt.isis.midas.syntheto.SubTypeDefinition
import edu.vanderbilt.isis.midas.syntheto.SumTypeDefinition
import edu.vanderbilt.isis.midas.syntheto.TopLevelConstruct
import edu.vanderbilt.isis.midas.syntheto.TypedVariable
import edu.vanderbilt.isis.midas.syntheto.UnlessExpression
import edu.vanderbilt.isis.midas.syntheto.WhenExpression
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.FormatterPreferenceKeys
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter
import org.eclipse.xtext.preferences.MapBasedPreferenceValues

class SynthetoFormatter extends AbstractFormatter2 {

	// @Inject extension SynthetoGrammarAccess
	def dispatch void format(Program program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.prepend[noSpace]
		val preferences = getPreferences
		val newMap = Maps.<String, String>newLinkedHashMap
		newMap.put(FormatterPreferenceKeys.indentation.id, '  ') // $NON-NLS-1$
		val result = new MapBasedPreferenceValues(preferences, newMap)
		request.preferences = result
		// program.regionFor.keyword("  ").replaceWith(" ")
		// program.regionFor.keyword("\t").replaceWith("  ")
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		program.regionFor.keyword(";").prepend[noSpace].append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		// program.regionFor.keyword("}").append[newLine]
		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]
		for (topLevelConstruct : program.contents) {
			topLevelConstruct.format
			if (topLevelConstruct != program.contents.last)
				topLevelConstruct.append[newLines = 2; priority = IHiddenRegionFormatter.HIGH_PRIORITY]
		}
		
		for (_c:program.commands){
			_c.format
			if (_c!= program.commands.last)
				_c.append[newLines = 2; priority = IHiddenRegionFormatter.HIGH_PRIORITY]		
		}
			
		
//		program.regionFor.keyword("&&").surround[space=" "]
//		program.regionFor.keyword("||").surround[space=" "]
//		program.regionFor.keyword("<=>").surround[space=" "]
//		program.regionFor.keyword("<==").surround[space=" "]
//		program.regionFor.keyword("==>").surround[space=" "]
//		program.regionFor.keyword(">=").surround[space=" "]
//		program.regionFor.keyword("==").surround[space=" "]
//		program.regionFor.keyword("<=").surround[space=" "]
//		program.regionFor.keyword("<").surround[space=" "]
//		program.regionFor.keyword(">").surround[space=" "]
//		program.regionFor.keyword("!=").surround[space=" "]
//		program.regionFor.keyword("+").surround[space=" "]
//		program.regionFor.keyword("-").surround[space=" "]
//		program.regionFor.keyword("*").surround[space=" "]
//		program.regionFor.keyword("%").surround[space=" "]
//		program.regionFor.keyword("/").surround[space=" "]
		
		program.append[newLine]
	}

	def dispatch void format(Map typeElement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		typeElement.domain.format
		typeElement.range.format
	}
	
	def dispatch void format(Pragmadirectives directive, extension IFormattableDocument document) {
		directive.prepend[newLine].prepend[noSpace]	
		
		directive.regionFor.keyword("use").prepend[noSpace]
		directive.regionFor.keyword("acl2").prepend[space = " "].append[space = " "]
		directive.regionFor.keyword("port").prepend[space = " "].append[space = " "]
		directive.append[newLine]
	}
	

	def dispatch void format(TopLevelConstruct program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		program.regionFor.keyword(";").prepend[noSpace].append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		// program.regionFor.keyword("}").append[newLine]
		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]

		System.out.println("formatted string midas.edu.syntheo");
	}

	def dispatch void format(FunctionDefinition program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		program.regionFor.keyword(";").prepend[noSpace].append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		program.regionFor.keyword(",").prepend[noSpace]
		program.regionFor.keyword(",").append[space = " "]
		// program.regionFor.keyword("}").append[newLine]
		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]

		for (_param : program.param) {
			_param.tag.regionFor.keyword(":").prepend[noSpace]
			_param.tag.regionFor.keyword(":").append[noSpace]
		}
		for (_param : program.returnlist) {
			_param.tag.regionFor.keyword(":").prepend[noSpace]
			_param.tag.regionFor.keyword(":").append[noSpace]
		}

		program.expr.format

//		for (_expr : program.returnExpression)
//			_expr.format
	}

	def dispatch void format(FunctionSpecfication program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		program.regionFor.keyword(";").prepend[noSpace].append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		program.regionFor.keyword(",").prepend[noSpace]
		program.regionFor.keyword(",").append[space = " "]
		// program.regionFor.keyword("}").append[newLine]
		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]

		for (_param : program.param) {
			_param.tag.regionFor.keyword(":").prepend[noSpace]
			_param.tag.regionFor.keyword(":").append[noSpace]
		}
		for (_param : program.returnlist) {
			_param.tag.regionFor.keyword(":").prepend[noSpace]
			_param.tag.regionFor.keyword(":").append[noSpace]
		}

		program.expr.format
	}

	def dispatch void format(IfExpression program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		program.regionFor.keyword(";").prepend[noSpace].append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		program.regionFor.keyword(",").prepend[noSpace]
		program.regionFor.keyword(",").append[space = " "]
		// program.regionFor.keyword("}").append[newLine]
		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]

		if (program.elseexpr !== null)
			program.elseexpr.format

		program.thenexpr.format

	}

	def dispatch void format(WhenExpression program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		program.regionFor.keyword(";").prepend[noSpace].append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		program.regionFor.keyword(",").prepend[noSpace]
		program.regionFor.keyword(",").append[space = " "]
		// program.regionFor.keyword("}").append[newLine]
		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]

		if (program.elseexpr !== null)
			program.elseexpr.format

		program.thenexpr.format

	}

	def dispatch void format(UnlessExpression program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		program.regionFor.keyword(";").prepend[noSpace].append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		program.regionFor.keyword(",").prepend[noSpace]
		program.regionFor.keyword(",").append[space = " "]
		// program.regionFor.keyword("}").append[newLine]
		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]

		if (program.elseexpr !== null)
			program.elseexpr.format

		program.thenexpr.format

	}

	def dispatch void format(CondBranches program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		program.regionFor.keyword(";").prepend[noSpace].append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		program.regionFor.keyword(",").prepend[noSpace]
		program.regionFor.keyword(",").append[space = " "]
		// program.regionFor.keyword("}").append[newLine]
		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]

		program.test.format
		program.thenexpr.format

	}

	def dispatch void format(CondExpression program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		program.regionFor.keyword(";").prepend[noSpace].append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		program.regionFor.keyword(",").prepend[noSpace]
		program.regionFor.keyword(",").append[space = " "]
		// program.regionFor.keyword("}").append[newLine]
		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]

		if (program.branches !== null) {
			for (_branch : program.branches)
				_branch.format
		}

	}

	def dispatch void format(Elseexpr program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		program.regionFor.keyword(";").prepend[noSpace].append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		program.regionFor.keyword(",").prepend[noSpace]
		program.regionFor.keyword(",").append[space = " "]
		// program.regionFor.keyword("}").append[newLine]
		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]

		program.elseexpr.format

	}

	def dispatch void format(Expression program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append [
			space = " ";
			priority = IHiddenRegionFormatter.LOW_PRIORITY
		]
		program.regionFor.keyword(";").prepend[noSpace; priority = IHiddenRegionFormatter.HIGH_PRIORITY].append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		program.regionFor.keyword(",").prepend[noSpace]
		program.regionFor.keyword(",").append[space = " "]

		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]

	}

	def dispatch void format(BlockExpression program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		program.regionFor.keyword(";").prepend[noSpace].append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		program.regionFor.keyword(",").prepend[noSpace]
		program.regionFor.keyword(",").append[space = " "]
		// program.regionFor.keyword("}").append[newLine]
		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]
		program.expr.format

	}

	def dispatch void format(LetExpression program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.regionFor.keyword("let").prepend[noSpace].append[space = " "]
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		program.regionFor.keyword(";").prepend[noSpace].append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		program.regionFor.keyword(",").prepend[noSpace]
		program.regionFor.keyword(",").append[space = " "]
		// program.regionFor.keyword("}").append[newLine]
		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]

		for (_var : program.vars)
			_var.format

		program.first.format
		program.second.format

	}

	def dispatch void format(SubTypeDefinition program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		program.regionFor.keyword("{").prepend[space = " "].append[newLine]
		program.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		program.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		program.regionFor.keyword(";").append[newLine]
		program.regionFor.keyword("}").prepend[newLine].append[newLine]
		program.regionFor.keyword(",").prepend[noSpace]
		program.regionFor.keyword(",").append[space = " "]

		program.regionFor.keyword("|").prepend[noSpace]
		program.regionFor.keyword("|").append[space = " "]
		// program.regionFor.keyword("}").append[newLine]
		interior(
			program.regionFor.keyword("{"),
			program.regionFor.keyword("}")
		)[indent]

		program.element.regionFor.keyword(":").prepend[noSpace].append[noSpace]
	}

	def dispatch void format(ProductTypeDefinition typeElement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		typeElement.regionFor.keyword("{").prepend[space = " "].append[newLine]
		typeElement.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		typeElement.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		typeElement.regionFor.keyword(";").append[newLine]
		typeElement.regionFor.keyword("}").prepend[newLine].append [
			newLine;
			priority = IHiddenRegionFormatter.LOW_PRIORITY
		]
		typeElement.regionFor.keyword(",").prepend[noSpace].append[newLine]

		typeElement.regionFor.keyword("|").prepend[newLine].append[space = " "]
		// typeElement.regionFor.keyword("}").append[newLine]
		// typeElement.regionFor.keyword("}").append[newLine]
		interior(
			typeElement.regionFor.keyword("{"),
			typeElement.regionFor.keyword("}")
		)[indent]

		for (_definition : typeElement.element)
			_definition.format

	}

	def dispatch void format(TypedVariable typeElement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		typeElement.regionFor.keyword(":").prepend[noSpace].append[noSpace]
	}

	def dispatch void format(SumTypeDefinition typeElement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		// typeElement.regionFor.keyword("variant").prepend[noSpace].append[space = " "]
		typeElement.regionFor.keyword("{").prepend[space = " "].append[newLine]
		typeElement.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		typeElement.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		typeElement.regionFor.keyword(";").append[newLine]
		typeElement.regionFor.keyword(",").prepend[noSpace; priority = IHiddenRegionFormatter.HIGH_PRIORITY].append [
			space = " "
		]
		typeElement.regionFor.keyword("}").prepend[newLine].append [
			newLine;
			priority = IHiddenRegionFormatter.LOW_PRIORITY
		]
		// typeElement.regionFor.keyword("}").append[newLine]
		// typeElement.regionFor.keyword("}").append[newLine]
		interior(
			typeElement.regionFor.keyword("{"),
			typeElement.regionFor.keyword("}").prepend[noSpace; priority = IHiddenRegionFormatter.HIGH_PRIORITY]
		)[indent]

		for (_alternative : typeElement.alternatives)
			_alternative.format

	}

	def dispatch void format(Alternative typeElement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		typeElement.regionFor.keyword("{").prepend[space = " "].append[newLine]
		typeElement.regionFor.keyword("(").prepend[noSpace].append[noSpace]
		typeElement.regionFor.keyword(")").prepend[noSpace].append[space = " "]
		typeElement.regionFor.keyword(";").append[newLine]
		typeElement.regionFor.keyword("}").prepend[newLine].append[newLine]
		typeElement.regionFor.keyword(",").prepend[noSpace].append[newLine]
//		typeElement.regionFor.keyword(",").append[space = " "]
		// typeElement.regionFor.keyword("}").append[newLine]
		// typeElement.regionFor.keyword("}").append[newLine]
		interior(
			typeElement.regionFor.keyword("{"),
			typeElement.regionFor.keyword("}")
		)[indent]

		typeElement.product.format
	}

// TODO: implement for ProductTypeDefinition, InvariantExpression, elementTag, ChildElement, Alternatives, SumTypeDefinition, SubTypeDefinition, FunctionSpecfication, FunctionDefinition, Param, VariableDeclaration, IfExpression, Or_expr, And_expr, Unary_expr, Compare_expr, assign, LiteralValue, FunctionCall, SetLiteral, SeqLiteral, MapLiteral, MapElement, Plus, Minus, Multi, Div
}
